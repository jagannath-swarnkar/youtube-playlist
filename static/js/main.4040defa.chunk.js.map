{"version":3,"sources":["Components/App.js","serviceWorker.js","index.js"],"names":["validUrl","require","youtube_regex","App","React","useState","url","setUrl","playlist","setPlaylist","link","setLink","youtube_id","parsed","match","isUri","console","log","func","mylist","length","splice","className","Card","TextField","fullWidth","id","label","variant","value","onChange","e","target","Button","onClick","undefined","push","window","alert","style","background","color","fontWeight","width","maxWidth","YouTube","videoId","containerClassName","opts","height","playerVars","autoplay","onEnd","onError","fontSize","map","i","key","deleteFromPlaylist","Divider","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4SAIIA,EAAWC,EAAQ,IACjBC,EAAgB,oEAmJPC,MAjJf,WAAgB,IAAD,EACSC,IAAMC,SAAS,IADxB,mBACNC,EADM,KACDC,EADC,OAEmBH,IAAMC,SAAS,IAFlC,mBAENG,EAFM,KAEIC,EAFJ,OAGWL,IAAMC,SAAS,IAH1B,mBAGNK,EAHM,KAGAC,EAHA,KAMPC,EAAa,SAAAN,GACjB,IAAMO,EAASP,EAAIQ,MAAMZ,GACzB,GAAIW,GAAUA,EAAO,GACnB,OAAOA,EAAO,IAGdb,EAASe,MAAM,+CACjBC,QAAQC,IAAI,qBAEZD,QAAQC,IAAI,aAwDd,IAAMC,EAAO,WACX,IAAIC,EAASX,EACTW,EAAOC,OAAS,GAClBD,EAAOE,OAAO,EAAG,GACjBV,EAAQQ,EAAO,KAEfR,EAAQ,KAQZ,OACE,yBAAKW,UAAU,OACb,yBAAKA,UAAU,SACb,kBAACC,EAAA,EAAD,CAAMD,UAAU,kBACd,kBAACE,EAAA,EAAD,CACEC,WAAS,EACTC,GAAG,iBACHC,MAAM,WACNC,QAAQ,WACRC,MAAOvB,EACPwB,SAAU,SAAAC,GACRxB,EAAOwB,EAAEC,OAAOH,UAGpB,kBAACI,EAAA,EAAD,CACEC,QAjFM,SAAAH,GACd,GAAIzB,GAAON,EAASe,MAAMT,GAAM,CAC9B,IAAIa,EAASX,OACW2B,IAApBvB,EAAWN,IACba,EAAOiB,KAAKxB,EAAWN,IACvBG,EAAYU,GACZZ,EAAO,IACiB,IAApBC,EAASY,QACXT,EAAQC,EAAWN,KAGrB+B,OAAOC,MAAM,wCAGfD,OAAOC,MAAM,qBAoEPC,MAAO,CACLC,WAAY,MACZC,MAAO,QACPC,WAAY,OACZC,MAAO,MACPC,SAAU,UAPd,QAaF,yBAAKtB,UAAU,cACb,kBAACuB,EAAA,EAAD,CACEC,QAASpC,EACTqC,mBAAoB,cACpBzB,UAAW,SACX0B,KAxEG,CACXC,OAAQ,MACRN,MAAO,MACPO,WAAY,CACVC,SAAU,IAqEJC,MAAOlC,EACPmC,QAAS,WAAKnC,SAIpB,6BACA,yBAAKI,UAAU,SACb,6BACE,kBAACW,EAAA,EAAD,CACEM,MAAO,CACLC,WAAY,UACZC,MAAO,QACPC,WAAY,OACZC,MAAO,OACPM,OAAQ,OACRK,SAAU,WAPd,YAvEC9C,EAAS+C,KAAI,SAACxB,EAAGyB,GACtB,OACE,yBAAKC,IAAKD,GACR,yBAAKlC,UAAU,gBACb,2CAAakC,EAAI,IACjB,wBAAI9B,GAAG,aAAaQ,QAAS,kBAtBZ,SAAAsB,GACzB,IAAIrC,EAASX,EACbW,EAAOE,OAAOmC,EAAG,GACjB/C,EAAYU,GAmB+BuC,CAAmBF,KAAtD,MAIF,kBAACG,EAAA,EAAD,cC3DUC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAAShD,MACvB,2DCZNiD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.4040defa.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Card, TextField, Button, Divider } from \"@material-ui/core\";\nimport YouTube from \"react-youtube\";\nvar validUrl = require(\"valid-url\");\nconst youtube_regex = /^.*(youtu\\.be\\/|vi?\\/|u\\/\\w\\/|embed\\/|\\?vi?=|\\&vi?=)([^#\\&\\?]*).*/;\n\nfunction App() {\n  const [url, setUrl] = React.useState(\"\");\n  const [playlist, setPlaylist] = React.useState([]);\n  const [link, setLink] = React.useState(\"\");\n\n  // this function return ID from youtube url\n  const youtube_id = url => {\n    const parsed = url.match(youtube_regex);\n    if (parsed && parsed[2]) {\n      return parsed[2];\n    }\n  };\n  if (validUrl.isUri(\"https://www.youtube.com/watch?v=_B9U2qvdLeo\")) {\n    console.log(\"Looks like an URI\");\n  } else {\n    console.log(\"Not a URI\");\n  }\n\n  // this function create ID from a valid url and push to playlist table\n  const add_Url = e => {\n    if (url && validUrl.isUri(url)) {\n      let mylist = playlist;\n      if (youtube_id(url) !== undefined) {\n        mylist.push(youtube_id(url));\n        setPlaylist(mylist);\n        setUrl(\"\");\n        if (playlist.length === 1) {\n          setLink(youtube_id(url));\n        }\n      } else {\n        window.alert(\"This is not a youtube video url\");\n      }\n    } else {\n      window.alert(\"Url is not valid\");\n    }\n  };\n\n  // this function delets data from playlist\n  const deleteFromPlaylist = i => {\n    let mylist = playlist;\n    mylist.splice(i, 1);\n    setPlaylist(mylist);\n  };\n\n  // this function from react-youtube module, it helps to autoplay\n  const opts = {\n    height: \"390\",\n    width: \"640\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  // this function returns a jsx for playlist\n  function myplaylist() {\n    return playlist.map((e, i) => {\n      return (\n        <div key={i}>\n          <div className=\"playlist-div\">\n            <h3>{`Link ${i + 1}`}</h3>\n            <h3 id=\"close-icon\" onClick={() => deleteFromPlaylist(i)}>\n              x\n            </h3>\n          </div>\n          <Divider />\n        </div>\n      );\n    });\n  }\n\n  // this function is for deleting already played video and replay next\n  const func = () => {\n    let mylist = playlist;\n    if (mylist.length > 0) {\n      mylist.splice(0, 1);\n      setLink(mylist[0]);\n    } else {\n      setLink(\"\");\n    }\n  };\n\n  // const errorHandler =()=>{\n    \n  // }\n\n  return (\n    <div className=\"App\">\n      <div className=\"div-1\">\n        <Card className=\"textfield-card\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            label=\"Outlined\"\n            variant=\"outlined\"\n            value={url}\n            onChange={e => {\n              setUrl(e.target.value);\n            }}\n          />\n          <Button\n            onClick={add_Url}\n            style={{\n              background: \"red\",\n              color: \"white\",\n              fontWeight: \"bold\",\n              width: \"20%\",\n              maxWidth: \"150px\"\n            }}\n          >\n            Add\n          </Button>\n        </Card>\n        <div className=\"iframe-div\">\n          <YouTube\n            videoId={link}\n            containerClassName={\"cont-string\"}\n            className={\"string\"}\n            opts={opts}\n            onEnd={func}\n            onError={()=>{func()}} \n          />\n        </div>\n      </div>\n      <hr />\n      <div className=\"div-2\">\n        <div>\n          <Button\n            style={{\n              background: \"#2196f3\",\n              color: \"white\",\n              fontWeight: \"bold\",\n              width: \"100%\",\n              height: \"78px\",\n              fontSize: \"larger\"\n            }}\n          >\n            Playlist\n          </Button>\n          {myplaylist()}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}